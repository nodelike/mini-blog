package templates

import (
	"mini-blog/app/models"
	"mini-blog/app/services"
	"fmt"
)

var (
	visibilityClasses = map[string]string{
		models.VisibilityPublic:  "inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-blue-100 text-blue-800",
		models.VisibilityPremium: "inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800",
		models.VisibilityAdmin:   "inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800",
	}
	
	roleClasses = map[string]string{
		models.RoleAdmin:   "inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800",
		models.RolePremium: "inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800",
		models.RoleUser:    "inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800",
	}
)

templ PostsList(posts []models.Post, user ...*models.User) {
	<div class="space-y-6">
		<div class="flex justify-between items-center">
			<h1 class="text-3xl font-bold text-gray-900">Blog Posts</h1>
			if len(user) > 0 && user[0] != nil && user[0].IsAdmin() {
				<a 
					href="/admin/posts/new"
					class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700 transition-colors"
				>
					+ Create New Post
				</a>
			}
		</div>
		
		if len(posts) == 0 {
			<div class="text-center py-12">
				<p class="text-gray-500">No posts yet. Check back later!</p>
			</div>
		} else {
			<div class="grid gap-6">
				for _, post := range posts {
					<article class="bg-white rounded-lg shadow-sm border p-6 hover:shadow-md transition-shadow">
						<h2 class="text-xl font-semibold text-gray-900 mb-2">
							<a href={ templ.URL(fmt.Sprintf("/posts/%s", post.Slug)) } class="hover:text-blue-600">
								{ post.Title }
							</a>
						</h2>
						<p class="text-gray-600 mb-4">
							{ truncateContent(post.Content, 200) }...
						</p>
						<div class="flex justify-between items-center text-sm text-gray-500">
							<time>{ post.CreatedAt.Format("January 2, 2006") }</time>
							<a href={ templ.URL(fmt.Sprintf("/posts/%s", post.Slug)) } class="text-blue-600 hover:text-blue-800">
								Read more →
							</a>
						</div>
					</article>
				}
			</div>
		}
	</div>
}

templ PostView(post models.Post) {
	<article class="bg-white rounded-lg shadow-sm border p-8">
		<header class="mb-8">
			<h1 class="text-3xl font-bold text-gray-900 mb-4">{ post.Title }</h1>
			<div class="text-gray-600">
				<time>{ post.CreatedAt.Format("January 2, 2006") }</time>
			</div>
		</header>
		
		<div class="prose prose-lg max-w-none">
			@templ.Raw(services.MarkdownToHTML(post.Content))
		</div>
		
		<footer class="mt-8 pt-8 border-t">
			<a href="/posts" class="text-blue-600 hover:text-blue-800">
				← Back to all posts
			</a>
		</footer>
	</article>
}

templ AdminPostsList(posts []models.Post) {
	<div class="space-y-6">
		<div class="flex justify-between items-center">
			<h1 class="text-3xl font-bold text-gray-900">Manage Posts</h1>
			<button 
				hx-get="/admin/posts/new" 
				hx-target="#content"
				class="bg-blue-600 text-white px-4 py-2 rounded-md hover:bg-blue-700"
			>
				New Post
			</button>
		</div>
		
		<div id="content">
			<div class="bg-white rounded-lg shadow-sm border overflow-hidden">
				<table class="min-w-full divide-y divide-gray-200">
					<thead class="bg-gray-50">
						<tr>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Title</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Status</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Visibility</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Date</th>
							<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
						</tr>
					</thead>
					<tbody class="bg-white divide-y divide-gray-200">
						for _, post := range posts {
							<tr>
								<td class="px-6 py-4 whitespace-nowrap">
									<div class="text-sm font-medium text-gray-900">{ post.Title }</div>
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									<span class={ "inline-flex px-2 py-1 text-xs font-semibold rounded-full", 
										templ.KV("bg-green-100 text-green-800", post.Published),
										templ.KV("bg-yellow-100 text-yellow-800", !post.Published) }>
										if post.Published {
											Published
										} else {
											Draft
										}
									</span>
								</td>
								<td class="px-6 py-4 whitespace-nowrap">
									<span class={ visibilityClasses[post.Visibility] }>
										{ models.VisibilityNames[post.Visibility] }
									</span>
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
									{ post.CreatedAt.Format("Jan 2, 2006") }
								</td>
								<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
									<button 
										hx-get={ fmt.Sprintf("/admin/posts/%d/edit", post.ID) }
										hx-target="#content"
										class="text-blue-600 hover:text-blue-900 mr-3"
									>
										Edit
									</button>
									<button 
										hx-delete={ fmt.Sprintf("/admin/posts/%d", post.ID) }
										hx-confirm="Are you sure you want to delete this post?"
										hx-target="closest tr"
										hx-swap="outerHTML"
										class="text-red-600 hover:text-red-900"
									>
										Delete
									</button>
								</td>
							</tr>
						}
					</tbody>
				</table>
			</div>
		</div>
	</div>
}

templ PostCreatePage() {
	<div class="space-y-6">
		<div class="flex justify-between items-center">
			<h1 class="text-3xl font-bold text-gray-900">Create New Post</h1>
			<button 
				hx-get="/admin/posts" 
				hx-target="#content"
				class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700"
			>
				← Back to Posts
			</button>
		</div>
		
		@PostForm(nil, false)
	</div>
}

templ PostEditPage(post *models.Post) {
	<div class="space-y-6">
		<div class="flex justify-between items-center">
			<h1 class="text-3xl font-bold text-gray-900">Edit Post</h1>
			<button 
				hx-get="/admin/posts" 
				hx-target="#content"
				class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700"
			>
				← Back to Posts
			</button>
		</div>
		
		@PostForm(post, true)
	</div>
}

templ PostForm(post *models.Post, isEdit bool) {
	<div class="bg-white rounded-lg shadow-sm border p-6">
		<h2 class="text-2xl font-bold text-gray-900 mb-6">
			if isEdit {
				Edit Post
			} else {
				New Post
			}
		</h2>
		
		<form 
			if isEdit {
				hx-put={ fmt.Sprintf("/admin/posts/%d", post.ID) }
			} else {
				hx-post="/admin/posts"
			}
			hx-target="#content"
			class="space-y-6"
		>
			<div>
				<label class="block text-sm font-medium text-gray-700 mb-2">Title</label>
				<input 
					type="text" 
					name="title" 
					value={ getPostValue(post, "title") }
					class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
					required
				/>
			</div>
			
			<div>
				<label class="block text-sm font-medium text-gray-700 mb-2">Slug</label>
				<input 
					type="text" 
					name="slug" 
					value={ getPostValue(post, "slug") }
					class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
					required
				/>
			</div>
			
			<div>
				<label class="block text-sm font-medium text-gray-700 mb-2">Content (Markdown)</label>
				<textarea 
					name="content" 
					rows="15"
					class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
					required
					placeholder="Use Markdown syntax for formatting..."
				>{ getPostValue(post, "content") }</textarea>
			</div>
			
			<div>
				<label class="block text-sm font-medium text-gray-700 mb-2">Visibility</label>
				<select 
					name="visibility" 
					class="w-full border border-gray-300 rounded-md px-3 py-2 focus:outline-none focus:ring-2 focus:ring-blue-500"
				>
					<option value={ models.VisibilityPublic } selected?={ post == nil || post.Visibility == models.VisibilityPublic }>
						Public - Anyone can view
					</option>
					<option value={ models.VisibilityPremium } selected?={ post != nil && post.Visibility == models.VisibilityPremium }>
						Premium - Only premium and admin users
					</option>
					<option value={ models.VisibilityAdmin } selected?={ post != nil && post.Visibility == models.VisibilityAdmin }>
						Admin Only - Only admin users
					</option>
				</select>
			</div>
			
			<div class="flex items-center">
				<input 
					type="checkbox" 
					name="published" 
					id="published"
					class="h-4 w-4 text-blue-600 border-gray-300 rounded focus:ring-blue-500"
					checked?={ post != nil && post.Published }
				/>
				<label for="published" class="ml-2 text-sm text-gray-700">Published</label>
			</div>
			
			<div class="flex justify-end space-x-3">
				<button 
					type="button"
					hx-get="/admin/posts"
					hx-target="#content"
					class="px-4 py-2 border border-gray-300 rounded-md text-gray-700 hover:bg-gray-50"
				>
					Cancel
				</button>
				<button 
					type="submit"
					class="px-4 py-2 bg-blue-600 text-white rounded-md hover:bg-blue-700"
				>
					Save Post
				</button>
			</div>
		</form>
	</div>
}

func getPostValue(post *models.Post, field string) string {
	if post == nil {
		return ""
	}
	switch field {
	case "title":
		return post.Title
	case "slug":
		return post.Slug
	case "content":
		return post.Content
	default:
		return ""
	}
}

func truncateContent(content string, length int) string {
	if len(content) <= length {
		return content
	}
	return content[:length]
} 