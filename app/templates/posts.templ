package templates

import (
	"mini-blog/app/models"
	"mini-blog/app/services"
	"fmt"
	"regexp"
	"strings"
)

templ PostsList(posts []models.Post, title string, showSearch bool, searchQuery string, showViewAll bool, user ...*models.User) {
	<div class="space-y-8">
		<div class="flex justify-between items-center">
			<h1 class="text-3xl font-bold text-gray-900">{ title }</h1>
			if len(user) > 0 && user[0] != nil && user[0].IsAdmin() {
				<a href="/admin/posts/new" class="bg-primary-600 text-white px-4 py-2 text-sm font-medium hover:bg-primary-700 transition">Create Post</a>
			}
		</div>
		
		if showSearch {
			@SearchForm(searchQuery)
			<div id="posts-list">
				@PostsContent(posts, showViewAll)
			</div>
		} else {
			@PostsContent(posts, showViewAll)
		}
	</div>
}

templ PostsContent(posts []models.Post, showViewAll bool) {
	if len(posts) == 0 {
		<div class="text-center py-16">
			<p class="text-gray-500">No posts found.</p>
		</div>
	} else {
		<div class="space-y-6">
			for _, post := range posts {
				<article class="bg-white border border-gray-200 p-6 hover:shadow-sm transition">
					<h2 class="text-xl font-semibold text-gray-900 mb-3">
						<a href={ templ.URL(fmt.Sprintf("/posts/%s", post.Slug)) } class="text-primary-600 hover:text-primary-700">
							{ post.Title }
						</a>
					</h2>
					<p class="text-gray-600 text-sm mb-4">
						@templ.Raw(cleanPreview(post.Content, 200) + "...")
					</p>
					<div class="flex justify-between items-center text-sm text-gray-500">
						<div class="flex items-center gap-5">
							<time>{ post.CreatedAt.Format("January 2, 2006") }</time>
							@VisibilityBadge(post.Visibility)
						</div>
						<a href={ templ.URL(fmt.Sprintf("/posts/%s", post.Slug)) } class="text-primary-600 hover:text-primary-700">
							Read more →
						</a>
					</div>
				</article>
			}
			if showViewAll {
				<div class="text-center">
					<a href="/posts" class="inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium text-gray-700 bg-white hover:bg-gray-50 transition">
						View All Posts →
					</a>
				</div>
			}
		</div>
	}
}

templ PostView(post models.Post) {
	<article class="bg-white border border-gray-200 p-8 max-w-4xl mx-auto">
		<header class="mb-8">
			<h1 class="text-3xl font-bold text-gray-900 mb-4">{ post.Title }</h1>
			<time class="text-gray-600">{ post.CreatedAt.Format("January 2, 2006") }</time>
		</header>
		
		<div class="prose">
			@templ.Raw(services.MarkdownToHTML(post.Content))
		</div>
		
		<footer class="mt-8 pt-8 border-t border-gray-200">
			<a href="/posts" class="text-primary-600 hover:text-primary-700">← Back to all posts</a>
		</footer>
	</article>
}



templ PostCreatePage() {
	<div class="space-y-6">
		<div class="flex justify-between items-center">
			<h1 class="text-3xl font-bold text-gray-900">Create New Post</h1>
			<button hx-get="/admin/dashboard" hx-target="#content" class="border border-gray-300 text-gray-700 px-4 py-2 text-sm font-medium hover:bg-gray-50 transition">
				← Back to Dashboard
			</button>
		</div>
		@PostForm(nil, false)
	</div>
}

templ PostEditPage(post *models.Post) {
	<div class="space-y-6">
		<div class="flex justify-between items-center">
			<h1 class="text-3xl font-bold text-gray-900">Edit Post</h1>
			<button hx-get="/admin/dashboard" hx-target="#content" class="border border-gray-300 text-gray-700 px-4 py-2 text-sm font-medium hover:bg-gray-50 transition">
				← Back to Dashboard
			</button>
		</div>
		@PostForm(post, true)
	</div>
}

templ PostForm(post *models.Post, isEdit bool) {
	<div class="bg-white border border-gray-200 p-6">
		<h2 class="text-2xl font-bold text-gray-900 mb-6">
			if isEdit {
				Edit Post
			} else {
				New Post
			}
		</h2>
		
		<form 
			if isEdit {
				hx-put={ fmt.Sprintf("/admin/posts/%d", post.ID) }
			} else {
				hx-post="/admin/posts"
			}
			hx-target="#content"
			class="space-y-6"
		>
			@FormInput("Title", "title", getPostValue(post, "title"), "text", true)
			<div>
				<label for="slug" class="block text-sm font-medium text-gray-700 mb-2">Slug <span class="text-gray-400 text-xs">(auto-generated)</span></label>
				<input type="text" id="slug" name="slug" value={ getPostValue(post, "slug") } class="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-primary-500" placeholder="auto-generated-from-title"/>
			</div>
			@FormTextarea("Content (Markdown)", "content", getPostValue(post, "content"), 15, true, "Use Markdown syntax for formatting...")
			
			<script>
				const titleField = document.querySelector('input[name="title"]');
				const slugField = document.querySelector('input[name="slug"]');
				titleField.oninput = e => {
					if (!slugField.value || slugField.dataset.auto) {
						slugField.value = e.target.value.toLowerCase().replace(/[^a-z0-9\s-]/g, '').replace(/\s+/g, '-').replace(/-+/g, '-').trim('-');
						slugField.dataset.auto = 'true';
					}
				};
				slugField.oninput = e => e.target.dataset.auto = e.target.value ? 'false' : 'true';
			</script>
			
					<div>
			<label for="visibility" class="block text-sm font-medium text-gray-700 mb-2">Visibility</label>
			<select id="visibility" name="visibility" class="w-full px-3 py-2 border border-gray-300 focus:outline-none focus:ring-2 focus:ring-primary-500" required>
				<option value="public" selected?={ post == nil || post.Visibility == "public" }>Public - Anyone can view</option>
				<option value="premium" selected?={ post != nil && post.Visibility == "premium" }>Premium - Only premium and admin users</option>
				<option value="admin" selected?={ post != nil && post.Visibility == "admin" }>Admin Only - Only admin users</option>
			</select>
		</div>
		@FormCheckbox("Published", "published", post != nil && post.Published, "published")
			
			<div class="flex justify-end space-x-3">
				<button type="button" hx-get="/admin/dashboard" hx-target="#content" class="border border-gray-300 text-gray-700 px-4 py-2 text-sm font-medium hover:bg-gray-50 transition">Cancel</button>
				<button type="submit" class="bg-primary-600 text-white px-4 py-2 text-sm font-medium hover:bg-primary-700 transition">Save Post</button>
			</div>
		</form>
	</div>
}

func getPostValue(post *models.Post, field string) string {
	if post == nil { return "" }
	switch field {
	case "title": return post.Title
	case "slug": return post.Slug
	case "content": return post.Content
	default: return ""
	}
}

func cleanPreview(content string, length int) string {
	if len(content) > length {
		content = content[:length]
	}
	// Convert links and clean markdown
	content = regexp.MustCompile(`\[([^\]]+)\]\(([^)]+)\)`).ReplaceAllString(content, `<a href="$2" class="text-primary-600">$1</a>`)
	content = regexp.MustCompile(`(?m)^#+\s*|^[\s]*[-*+]\s*|^[\s]*\d+\.\s*|\*\*?([^*]+)\*\*?|__?([^_]+)__?|`+"`[^`]+`"+`|^>\s*`).ReplaceAllString(content, "$1$2")
	return strings.TrimSpace(regexp.MustCompile(`\s+`).ReplaceAllString(content, " "))
}