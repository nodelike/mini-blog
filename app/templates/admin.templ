package templates

import (
	"mini-blog/app/models"
	"fmt"
)

templ AdminLayout(title string, content templ.Component, user *models.User) {
	<!DOCTYPE html>
	<html lang="en">
	<head>
		<meta charset="UTF-8"/>
		<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
		<title>{ title } - Mini Blog Admin</title>
		<script src="https://unpkg.com/htmx.org@1.9.10"></script>
		<script src="https://cdn.tailwindcss.com"></script>
		<style>
			body { 
				font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
			}
		</style>
	</head>
	<body class="bg-gray-50 text-gray-900">
		<nav class="bg-white shadow-sm border-b">
			<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
				<div class="flex justify-between h-16">
					<div class="flex items-center">
						<a href="/admin/dashboard" class="text-xl font-bold text-gray-900">Mini Blog Admin</a>
					</div>
					<div class="flex items-center space-x-4">
						<a href="/" class="text-gray-700 hover:text-gray-900">Public Site</a>
						<span class="text-gray-700">Hi, { user.Name }</span>
						<a href="/logout" class="text-gray-700 hover:text-gray-900">Logout</a>
					</div>
				</div>
			</div>
		</nav>
		<main class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
			<div id="content">
				@content
			</div>
		</main>
	</body>
	</html>
}

templ AdminDashboard() {
	<div class="space-y-6">
		<div class="flex justify-between items-center">
			<h1 class="text-3xl font-bold text-gray-900">Admin Dashboard</h1>
		</div>
		
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
			<div class="bg-white rounded-lg shadow-sm border p-6">
				<h3 class="text-lg font-semibold text-gray-900 mb-4">User Management</h3>
				<p class="text-gray-600 mb-4">Manage users and assign roles</p>
				<button 
					hx-get="/admin/users" 
					hx-target="#content"
					class="w-full bg-blue-600 text-white py-2 px-4 rounded-md hover:bg-blue-700"
				>
					Manage Users
				</button>
			</div>
			
			<div class="bg-white rounded-lg shadow-sm border p-6">
				<h3 class="text-lg font-semibold text-gray-900 mb-4">Posts Management</h3>
				<p class="text-gray-600 mb-4">Create and manage blog posts</p>
				<button 
					hx-get="/admin/posts" 
					hx-target="#content"
					class="w-full bg-green-600 text-white py-2 px-4 rounded-md hover:bg-green-700"
				>
					Manage Posts
				</button>
			</div>
			
			<div class="bg-white rounded-lg shadow-sm border p-6">
				<h3 class="text-lg font-semibold text-gray-900 mb-4">System Stats</h3>
				<p class="text-gray-600 mb-4">View system statistics</p>
				<button 
					hx-get="/admin/stats" 
					hx-target="#content"
					class="w-full bg-purple-600 text-white py-2 px-4 rounded-md hover:bg-purple-700"
				>
					View Stats
				</button>
			</div>
		</div>
	</div>
}

templ AdminUsersList(users []models.User) {
	<div class="space-y-6">
		<div class="flex justify-between items-center">
			<h1 class="text-3xl font-bold text-gray-900">User Management</h1>
			<button 
				hx-get="/admin/dashboard" 
				hx-target="#content"
				class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700"
			>
				← Back to Dashboard
			</button>
		</div>
		
		<div class="bg-white rounded-lg shadow-sm border overflow-hidden">
			<table class="min-w-full divide-y divide-gray-200">
				<thead class="bg-gray-50">
					<tr>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
							User
						</th>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
							Role
						</th>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
							Status
						</th>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
							Joined
						</th>
						<th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
							Actions
						</th>
					</tr>
				</thead>
				<tbody class="bg-white divide-y divide-gray-200">
					for _, user := range users {
						@AdminUserRow(user)
					}
				</tbody>
			</table>
		</div>
	</div>
}

templ AdminUserRow(user models.User) {
	<tr>
		<td class="px-6 py-4 whitespace-nowrap">
			<div class="flex items-center">
				<div class="ml-4">
					<div class="text-sm font-medium text-gray-900">
						{ user.Name }
					</div>
					<div class="text-sm text-gray-500">
						{ user.Email }
					</div>
				</div>
			</div>
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			@RoleBadge(user.Role)
		</td>
		<td class="px-6 py-4 whitespace-nowrap">
			@StatusBadge(user.IsVerified)
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
			{ user.CreatedAt.Format("Jan 2, 2006") }
		</td>
		<td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
			<select 
				hx-post={ fmt.Sprintf("/admin/users/%d/role", user.ID) }
				hx-target="closest tr"
				hx-swap="outerHTML"
				name="role"
				class="text-sm border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500"
			>
				<option value={ models.RoleUser } selected?={ user.Role == models.RoleUser }>User</option>
				<option value={ models.RolePremium } selected?={ user.Role == models.RolePremium }>Premium</option>
				<option value={ models.RoleAdmin } selected?={ user.Role == models.RoleAdmin }>Admin</option>
			</select>
		</td>
	</tr>
}

templ RoleBadge(role string) {
	<span class={ getRoleClass(role) }>
		{ models.RoleNames[role] }
	</span>
}

templ StatusBadge(isVerified bool) {
	if isVerified {
		<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-green-100 text-green-800">
			Verified
		</span>
	} else {
		<span class="inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800">
			Pending
		</span>
	}
}

templ AdminStats() {
	<div class="space-y-6">
		<div class="flex justify-between items-center">
			<h1 class="text-3xl font-bold text-gray-900">System Statistics</h1>
			<button 
				hx-get="/admin/dashboard" 
				hx-target="#content"
				class="bg-gray-600 text-white px-4 py-2 rounded-md hover:bg-gray-700"
			>
				← Back to Dashboard
			</button>
		</div>
		
		<div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
			<div class="bg-white rounded-lg shadow-sm border p-6">
				<h3 class="text-lg font-semibold text-gray-900 mb-2">Total Users</h3>
				<p class="text-3xl font-bold text-blue-600" id="total-users">Loading...</p>
			</div>
			
			<div class="bg-white rounded-lg shadow-sm border p-6">
				<h3 class="text-lg font-semibold text-gray-900 mb-2">Premium Users</h3>
				<p class="text-3xl font-bold text-green-600" id="premium-users">Loading...</p>
			</div>
			
			<div class="bg-white rounded-lg shadow-sm border p-6">
				<h3 class="text-lg font-semibold text-gray-900 mb-2">Total Posts</h3>
				<p class="text-3xl font-bold text-purple-600" id="total-posts">Loading...</p>
			</div>
			
			<div class="bg-white rounded-lg shadow-sm border p-6">
				<h3 class="text-lg font-semibold text-gray-900 mb-2">Published Posts</h3>
				<p class="text-3xl font-bold text-orange-600" id="published-posts">Loading...</p>
			</div>
		</div>
	</div>
}

func getRoleClass(role string) string {
	classes := map[string]string{
		models.RoleAdmin:   "inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-red-100 text-red-800",
		models.RolePremium: "inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-yellow-100 text-yellow-800",
		models.RoleUser:    "inline-flex px-2 py-1 text-xs font-semibold rounded-full bg-gray-100 text-gray-800",
	}
	if class, exists := classes[role]; exists {
		return class
	}
	return classes[models.RoleUser] // Default fallback
} 